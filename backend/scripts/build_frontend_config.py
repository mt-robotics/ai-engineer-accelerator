"""
AI Tracker Frontend Configuration Builder
"""

import os
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv


class AITrackerConfigBuilder:
    def __init__(self, verbose=False):
        self.verbose = verbose
        self.project_root = Path(__file__).parent.parent.parent
        self.environments = ["development", "production", "staging"]

    def load_env_config(self, environment):
        """Load configuration from environment file"""
        if environment == "development":
            env_file = self.project_root / "backend" / ".env"
        elif environment == "production":
            env_file = self.project_root / "backend" / ".env.prod"
        elif environment == "staging":
            env_file = self.project_root / "backend" / ".env.stg"
        else:
            env_file = self.project_root / "backend" / f".env.{environment}"

        if not env_file.exists():
            return None

        load_dotenv(env_file, override=True)

        # Extract frontend-relevant configuration
        config = {
            "API_URL": os.getenv("FRONTEND_API_URL", "http://localhost:8000"),
            "DEBUG": os.getenv("API_DEBUG", "false").lower() == "true",
            "ENVIRONMENT": os.getenv("ENVIRONMENT", environment),
            "ANALYTICS_ENABLED": os.getenv("ANALYTICS_ENABLED", "true").lower()
            == "true",
            "SPACED_REPETITION_ENABLED": os.getenv(
                "SPACED_REPETITION_ENABLED", "true"
            ).lower()
            == "true",
            "DEFAULT_XP_MULTIPLIER": float(os.getenv("DEFAULT_XP_MULTIPLIER", "1.0")),
        }

        return config

    def generate_config_file(self, configs, target_env=None):
        """Generate JavaScript configuration file"""
        if target_env and target_env in configs:
            configs = {target_env: configs[target_env]}

        js_content = self._generate_js_content(configs)

        output_file = self.project_root / "frontend" / "config.js"
        output_file.parent.mkdir(exist_ok=True)

        with open(output_file, "w", encoding="utf-8") as f:
            f.write(js_content)

        return output_file

    def _generate_js_content(self, configs):
        """Generate the JavaScript configuration content"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        js_content = f"""/**
* AI Progress Tracker Frontend Configuration
*
* Auto-generated from backend .env files on {timestamp}
* DO NOT EDIT THIS FILE MANUALLY - your changes will be overwritten!
*
* To update configuration:
* 1. Edit the appropriate .env file (.env.prod, .env.stg, .env)
* 2. Run: python scripts/build-frontend-config.py
* 3. Redeploy your frontend
*/
        
const config = {json.dumps(configs, indent=2)};

/**
* Environment Detection
*/
function detectEnvironment() {{
    const hostname = window.location.hostname;
    
    if (hostname === 'localhost' || hostname === '127.0.0.1') {{
        return 'development';
    }}
    
    if (hostname.includes('staging')) {{
        return 'staging';
    }}
    
    return 'production';
}}

// Get current environment configuration
const currentEnvironment = detectEnvironment();
const currentConfig = config[currentEnvironment];

if (!currentConfig) {{
    console.error(`No configuration found for environment: ${{currentEnvironment}}`);
    window.AITrackerConfig = config.development || {{}};
}} else {{
    window.AITrackerConfig = currentConfig;
}}

window.AITrackerConfig.DETECTED_ENVIRONMENT = currentEnvironment;

// Debug logging
if (currentConfig && currentConfig.DEBUG) {{
    console.log('üéØ AI Tracker Configuration Loaded');
    console.log('Environment:', currentEnvironment);
    console.log('API URL:', currentConfig.API_URL);
    console.log('Full Config:', currentConfig);
}}

// Export for modules
if (typeof module !== 'undefined' && module.exports) {{
    module.exports = {{ config, currentConfig: window.AITrackerConfig }};
}}
"""
        return js_content

    def build(self, target_env=None):
        """Main build process"""
        print("üéØ Building AI Tracker Frontend Configuration...")

        configs = {}
        for env in self.environments:
            config = self.load_env_config(env)
            if config:
                configs[env] = config

        if not configs:
            print("‚ùå No valid environment configurations found!")
            return False

        output_file = self.generate_config_file(configs, target_env)

        print("‚úÖ Frontend configuration built successfully!")
        print(f"üìÅ Generated: {output_file}")
        print(f"üåç Environments: {', '.join(configs.keys())}")

        return True


def main():
    parser = argparse.ArgumentParser(
        description="Generate AI Tracker frontend configuration"
    )
    parser.add_argument("--env", choices=["development", "production", "staging"])
    parser.add_argument("--verbose", "-v", action="store_true")

    args = parser.parse_args()

    builder = AITrackerConfigBuilder(verbose=args.verbose)
    success = builder.build(target_env=args.env)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
